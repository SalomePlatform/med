// Copyright (C) 2005-2015  CEA/DEN, EDF R&D, OPEN CASCADE
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

#ifndef __MED_GEN_IDL_
#define __MED_GEN_IDL_

#include "SALOME_Component.idl"
#include "SALOME_Exception.idl"
#include "MEDDataManager.idl"

module MED_ORB
{
  /*!
    \brief Operation result codes
  */
  enum status {
    OP_OK,                   //!< OK result
    OP_ERROR                 //!< ERROR: other problems
  };

  interface
  MED_Gen : Engines::EngineComponent
  {
    status addDatasourceToStudy(in SALOMEDS::Study study,
                                in MEDCALC::DatasourceHandler datasourceHandler)
      raises (SALOME::SALOME_Exception);

    status registerPresentation(in SALOMEDS::Study study,
                                in long fieldId,
                                in string name,
                                in string label)
      raises (SALOME::SALOME_Exception);
  };
};

#endif
